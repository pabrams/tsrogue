#+title: r/roguelikedev summer tutorial 2021
#+date: <2021-06-25 Fri>
#+options: toc:nil

#+begin_comment

NOTE: this org file acted as my "diary". I exported it to html:

https://www.redblobgames.com/x/2126-roguelike-dev/

I don't expect that the org file itself will be useful to you, as it uses features that are only in my custom version of emacs. However, the html+js should work on its own.

#+end_comment

Each summer r/roguelikedev has a [[https://old.reddit.com/r/roguelikedev/wiki/python_tutorial_series][summer event]] in which we all make a simple roguelike, roughly following the libtcod roguelike tutorial. I've tried several times and [[href:/x/2025-roguelike-dev/][actually finished in 2020]], using [[https://ondras.github.io/rot.js/hp/][rot.js]] and Javascript. Last year, to keep the scope down, I told myself to implement only the topics from the tutorial, but make a list of things I might want to change. Since I started with last year's code, it's already playable:

#+include: "game.html" export html

(Icons from [[https://game-icons.net][game-icons.net]], CC BY 3.0, see source of [[href:_symbol-table.html]] for list of sprites and their authors)

This year, instead of going through the tutorial again from scratch, I'm going to revisit each chapter and try doing things differently. High level goals: tile graphics, thin walls (requiring a new map generator and a new field of view implementation), [[https://simblob.blogspot.com/2019/10/verb-noun-vs-noun-verb.html][noun-verb user interface]], more interesting monster behavior, redesigned stat and combat system, new control scheme, a small amount of animation.

Source code: [[href:game.html][game.html]] + [[href:roguelike-dev.ts][roguelike-dev.ts]] (build with esbuild) - and [[https://github.com/redblobgames/2126-roguelikedev][on github]].

* Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:

It's been a few years since I've used Typescript, and I wanted to dip my toes into it again, mainly because of the existence of [[https://esbuild.github.io/][esbuild]], which is /much/ faster and also handles bundling, two issues I had the last time I used Typescript. I switched the source code from Javascript to Typescript, renaming =roguelikedev.js= to =roguelikedev.ts= and adding a build step:

#+include: "build.sh" src sh

Esbuild is very fast and doesn't require me to have package.json etc. However it doesn't actually check the types; I only check the types in the code editor, using language server (lsp-mode in emacs). Since I'm converting from Javascript, some of my code is written in ways that Typescript can't verify the correctness, so esbuild not forcing the issue works better for me right now.

One thing I want to have is a way to convert to Javascript /preserving formatting/, only stripping out types. Unfortunately, Esbuild throws away comments and formatting while stripping out types. The Typescript compiler is a little better, preserving comments but still changing the formatting and newlines. There are some workarounds [[https://github.com/microsoft/TypeScript/issues/843][on this page]] if I ever need to convert back to Javascript. Until then, your best bet is to run ~tsc -t esnext roguelike-dev.ts~ to produce =roguelike-dev.js=, which will be pretty close to the Typescript with the type annotations removed. If I ever want to give up on Typescript, or if my readers want to use Javascript instead of Typescript, this will come in handy.

I went through the code and put in some (not all) types. There are a few places where my code was a bit sloppy so I had to clean it up to make the types work. I expect to add more types over time.

* Display
:PROPERTIES:
:CUSTOM_ID: display
:END:

This feels like a big change. I'm switching from ASCII to graphics. I wanted to break it up into smaller changes that I can think about, implement, and test. 

** SVG
:PROPERTIES:
:CUSTOM_ID: display-rotjs-to-svg
:END:

The first change  is to /keep/ the ASCII but render to SVG instead of rot.js. Here's the old and new renderer:

[[./screenshots/ch1-canvas.png]]

[[./screenshots/ch1-svg.png]]

The main difference is that the new renderer has /square tiles/. I'm planning to use square sprites so this is the size I will want. It looks funny right now with ASCII characters. In last year's tutorial I made the map size 60⨉25. This makes sense for a terminal with tall characters, but I expect a different size will work best for square tiles.

** Sprites
:PROPERTIES:
:CUSTOM_ID: display-ascii-to-sprites
:END:

The second change is to switch from ASCII to sprites.

1. I modified the entity properties to include a sprite name, like [[https://game-icons.net/1x1/lorc/cowled.html]["cowled"]].
2. I extracted the sprites into a =<symbol>= table using [[href:/x/2125-svg-symbols/][a python script I wrote]]

It turned out to be /incredibly easy/ to implement:

[[./screenshots/ch1-svg-sprites.png]]

But it's too hard to read now! That's one of the advantages of ASCII: our brains have a lot of practice recognizing letters, but not a lot of practice recognizing this project's new shapes.

#+begin_comment
../2125-svg-symbols/icon-to-svg-symbols.py cowled stairs troll orc-head carrion health-potion scroll-unfurled plain-dagger broadsword towel shield >_symbol-table.html
#+end_comment

#+include: "_symbol-table.html" export html

** Readability
:PROPERTIES:
:CUSTOM_ID: display-sprites-readability
:END:

The map used to be 60⨉25 = 1500 tiles with tall narrow character tiles. The SVG map uses square tiles, so they were half the size of the old tiles. In addition, the vector art has more detail than the ASCII characters. To improve the readability I'm going to:

1. make the tile sizes 20% larger (by decreasing the map size to 40⨉30 = 1200 tiles)
2. increase the foreground/background contrast (by not using yellow/blue for fov, and changing icon colors)

[[./screenshots/ch1-svg-colors.png]]

I think the sprites are more readable here than in the previous screenshot.

#+begin_export html
<x:footer>
  <style>
    table.standard { border: 0; }
    table.standard th, table.standard td { font-family: var(--sans-serif); border-left-width: 0; border-right-width: 0; border-color: #ddd; }
    table.standard th { border-top-width: 0; background: unset; }

    figure img {
        display: block;
        margin: auto;
        border: 2px solid #999;
        box-shadow: 0 1px 2px 2px rgba(0,0,0,0.2);
    }
  </style>

  Created 25 Jun 2021; &#160;
  <!-- hhmts start -->Last modified: 29 Jun 2021<!-- hhmts end -->
</x:footer>
#+end_export
